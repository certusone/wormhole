// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package nodev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// NodePrivilegedClient is the client API for NodePrivileged service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodePrivilegedClient interface {
	// SubmitGuardianSetVAA injects a guardian set change VAA into the guardian node.
	// The node will inject the VAA into the aggregator and sign/broadcast the VAA signature.
	//
	// A consensus majority of nodes on the network will have to inject the VAA within the
	// VAA timeout window for it to reach consensus.
	//
	SubmitGuardianSetVAA(ctx context.Context, in *SubmitGuardianSetVAARequest, opts ...grpc.CallOption) (*SubmitGuardianSetVAAResponse, error)
}

type nodePrivilegedClient struct {
	cc grpc.ClientConnInterface
}

func NewNodePrivilegedClient(cc grpc.ClientConnInterface) NodePrivilegedClient {
	return &nodePrivilegedClient{cc}
}

func (c *nodePrivilegedClient) SubmitGuardianSetVAA(ctx context.Context, in *SubmitGuardianSetVAARequest, opts ...grpc.CallOption) (*SubmitGuardianSetVAAResponse, error) {
	out := new(SubmitGuardianSetVAAResponse)
	err := c.cc.Invoke(ctx, "/node.v1.NodePrivileged/SubmitGuardianSetVAA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodePrivilegedServer is the server API for NodePrivileged service.
// All implementations must embed UnimplementedNodePrivilegedServer
// for forward compatibility
type NodePrivilegedServer interface {
	// SubmitGuardianSetVAA injects a guardian set change VAA into the guardian node.
	// The node will inject the VAA into the aggregator and sign/broadcast the VAA signature.
	//
	// A consensus majority of nodes on the network will have to inject the VAA within the
	// VAA timeout window for it to reach consensus.
	//
	SubmitGuardianSetVAA(context.Context, *SubmitGuardianSetVAARequest) (*SubmitGuardianSetVAAResponse, error)
	mustEmbedUnimplementedNodePrivilegedServer()
}

// UnimplementedNodePrivilegedServer must be embedded to have forward compatible implementations.
type UnimplementedNodePrivilegedServer struct {
}

func (UnimplementedNodePrivilegedServer) SubmitGuardianSetVAA(context.Context, *SubmitGuardianSetVAARequest) (*SubmitGuardianSetVAAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitGuardianSetVAA not implemented")
}
func (UnimplementedNodePrivilegedServer) mustEmbedUnimplementedNodePrivilegedServer() {}

// UnsafeNodePrivilegedServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodePrivilegedServer will
// result in compilation errors.
type UnsafeNodePrivilegedServer interface {
	mustEmbedUnimplementedNodePrivilegedServer()
}

func RegisterNodePrivilegedServer(s *grpc.Server, srv NodePrivilegedServer) {
	s.RegisterService(&_NodePrivileged_serviceDesc, srv)
}

func _NodePrivileged_SubmitGuardianSetVAA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitGuardianSetVAARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodePrivilegedServer).SubmitGuardianSetVAA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.v1.NodePrivileged/SubmitGuardianSetVAA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodePrivilegedServer).SubmitGuardianSetVAA(ctx, req.(*SubmitGuardianSetVAARequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodePrivileged_serviceDesc = grpc.ServiceDesc{
	ServiceName: "node.v1.NodePrivileged",
	HandlerType: (*NodePrivilegedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitGuardianSetVAA",
			Handler:    _NodePrivileged_SubmitGuardianSetVAA_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node/v1/node.proto",
}
