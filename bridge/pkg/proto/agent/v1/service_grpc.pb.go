// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package agentv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AgentClient is the client API for Agent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentClient interface {
	SubmitVAA(ctx context.Context, in *SubmitVAARequest, opts ...grpc.CallOption) (*SubmitVAAResponse, error)
	WatchLockups(ctx context.Context, in *WatchLockupsRequest, opts ...grpc.CallOption) (Agent_WatchLockupsClient, error)
	GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error)
}

type agentClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentClient(cc grpc.ClientConnInterface) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) SubmitVAA(ctx context.Context, in *SubmitVAARequest, opts ...grpc.CallOption) (*SubmitVAAResponse, error) {
	out := new(SubmitVAAResponse)
	err := c.cc.Invoke(ctx, "/agent.v1.Agent/SubmitVAA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) WatchLockups(ctx context.Context, in *WatchLockupsRequest, opts ...grpc.CallOption) (Agent_WatchLockupsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Agent_serviceDesc.Streams[0], "/agent.v1.Agent/WatchLockups", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentWatchLockupsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Agent_WatchLockupsClient interface {
	Recv() (*LockupEvent, error)
	grpc.ClientStream
}

type agentWatchLockupsClient struct {
	grpc.ClientStream
}

func (x *agentWatchLockupsClient) Recv() (*LockupEvent, error) {
	m := new(LockupEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentClient) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error) {
	out := new(GetBalanceResponse)
	err := c.cc.Invoke(ctx, "/agent.v1.Agent/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentServer is the server API for Agent service.
// All implementations must embed UnimplementedAgentServer
// for forward compatibility
type AgentServer interface {
	SubmitVAA(context.Context, *SubmitVAARequest) (*SubmitVAAResponse, error)
	WatchLockups(*WatchLockupsRequest, Agent_WatchLockupsServer) error
	GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error)
	mustEmbedUnimplementedAgentServer()
}

// UnimplementedAgentServer must be embedded to have forward compatible implementations.
type UnimplementedAgentServer struct {
}

func (UnimplementedAgentServer) SubmitVAA(context.Context, *SubmitVAARequest) (*SubmitVAAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitVAA not implemented")
}
func (UnimplementedAgentServer) WatchLockups(*WatchLockupsRequest, Agent_WatchLockupsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchLockups not implemented")
}
func (UnimplementedAgentServer) GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedAgentServer) mustEmbedUnimplementedAgentServer() {}

// UnsafeAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServer will
// result in compilation errors.
type UnsafeAgentServer interface {
	mustEmbedUnimplementedAgentServer()
}

func RegisterAgentServer(s *grpc.Server, srv AgentServer) {
	s.RegisterService(&_Agent_serviceDesc, srv)
}

func _Agent_SubmitVAA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitVAARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).SubmitVAA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.v1.Agent/SubmitVAA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).SubmitVAA(ctx, req.(*SubmitVAARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_WatchLockups_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchLockupsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServer).WatchLockups(m, &agentWatchLockupsServer{stream})
}

type Agent_WatchLockupsServer interface {
	Send(*LockupEvent) error
	grpc.ServerStream
}

type agentWatchLockupsServer struct {
	grpc.ServerStream
}

func (x *agentWatchLockupsServer) Send(m *LockupEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _Agent_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.v1.Agent/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).GetBalance(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Agent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "agent.v1.Agent",
	HandlerType: (*AgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitVAA",
			Handler:    _Agent_SubmitVAA_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _Agent_GetBalance_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchLockups",
			Handler:       _Agent_WatchLockups_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "agent/v1/service.proto",
}
